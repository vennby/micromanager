import os, io
from flask import Flask, render_template, request, redirect, url_for, send_file, jsonify
from werkzeug.utils import secure_filename
from models import db, EventDocumentations, Contributions
from forms import EventForm
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph, Frame
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_JUSTIFY

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///events.db'
app.config['UPLOAD_FOLDER'] = 'static/uploads'

db.init_app(app)

with app.app_context():
    db.create_all()

def draw_page_border(pdf, width, height):
    margin = 20
    pdf.setLineWidth(2)
    pdf.rect(margin, margin, width - 2 * margin, height - 2 * margin)

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/events')
def index():
    events = EventDocumentations.query.all()
    return render_template('index.html', events=events)

@app.route('/event/add', methods=['GET', 'POST'])
@app.route('/event/edit/<int:event_id>', methods=['GET', 'POST'])
def manage_event(event_id=None):
    event = EventDocumentations.query.get(event_id) if event_id else None
    form = EventForm(obj=event)
    if form.validate_on_submit():
        filename = None
        if form.image.data:
            filename = secure_filename(form.image.data.filename)
            path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            form.image.data.save(path)
        if not event:
            event = EventDocumentations()
        form.populate_obj(event)
        if filename:
            event.image_filename = filename
        db.session.add(event)
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('event_form.html', form=form, event=event)

@app.route('/event/delete/<int:event_id>')
def delete_event(event_id):
    event = EventDocumentations.query.get_or_404(event_id)
    db.session.delete(event)
    db.session.commit()
    return redirect(url_for('index'))

@app.route('/download', methods=['GET', 'POST'])
def download_pdf():
    if request.method == 'POST':
        selected_ids = request.form.getlist('event_ids')
        raw_filename = request.form.get('filename', 'selected_events').strip()
        cover_title = raw_filename.replace('.pdf', '').replace('_', ' ')
        custom_filename = raw_filename
        if not custom_filename.lower().endswith('.pdf'):
            custom_filename += '.pdf'
        download_filename = secure_filename(custom_filename)

        events = EventDocumentations.query.filter(EventDocumentations.id.in_(selected_ids)).all()

        buffer = io.BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4

        styles = getSampleStyleSheet()
        justified_style = ParagraphStyle(
            name='Justified',
            parent=styles['Normal'],
            fontName='Helvetica',
            fontSize=12,
            leading=14,
            alignment=TA_JUSTIFY
        )

        # --- COVER PAGE ---
        draw_page_border(pdf, width, height)
        # Draw the logo centered above the title
        logo_path = os.path.join(app.root_path, 'static', 'logo_mtc.svg')
        try:
            from svglib.svglib import svg2rlg
            from reportlab.graphics import renderPDF
            drawing = svg2rlg(logo_path)
            # Center the logo, scale to about 120px high
            scale = 120.0 / drawing.height
            drawing.width *= scale
            drawing.height *= scale
            drawing.scale(scale, scale)
            renderPDF.draw(drawing, pdf, (width - drawing.width) / 2, height/2 + 80)
        except Exception as e:
            print(f"SVG logo error: {e}")
        pdf.setFont("Helvetica-Bold", 32)
        pdf.drawCentredString(width/2, height/2 + 40, "Event Documentation")
        pdf.setFont("Helvetica", 20)
        pdf.drawCentredString(width/2, height/2 - 10, cover_title)
        pdf.setFont("Helvetica", 12)
        pdf.drawCentredString(width/2, height/2 - 60, "Generated by MTC Event Manager")
        pdf.showPage()

        # --- END COVER PAGE ---
        draw_page_border(pdf, width, height)
        y = height - 50
        page_num = 2
        def draw_page_number(pdf, page_num, width, height):
            pdf.setFont("Helvetica", 10)
            pdf.drawCentredString(width/2, 30, f"{page_num-1}")
        draw_page_number(pdf, page_num, width, height)

        for event in events:
            required_space = 300
            if y < 100 + required_space:
                pdf.showPage()
                page_num += 1
                draw_page_border(pdf, width, height)
                draw_page_number(pdf, page_num, width, height)
                y = height - 50

            # Title
            pdf.setFont("Helvetica-Bold", 16)
            pdf.drawString(50, y, event.title)
            y -= 30

            # Date & participants
            pdf.setFont("Helvetica", 12)
            pdf.drawString(50, y, f"Date: {event.date}")
            y -= 20
            pdf.drawString(50, y, f"Participants: {event.participants}")
            y -= 20

            # Image
            img_height = 0
            if event.image_filename:
                image_path = os.path.join(app.config['UPLOAD_FOLDER'], event.image_filename)
                try:
                    img = ImageReader(image_path)
                    img_width = width - 100
                    img_height = 180
                    pdf.drawImage(img, 50, y - img_height, width=img_width, height=img_height, preserveAspectRatio=True, mask='auto')
                    y -= img_height + 10
                except Exception as e:
                    print(f"Error loading image: {e}")

            # Description
            desc_para = Paragraph(event.description.replace('\n', '<br />'), justified_style)
            desc_height = 500
            desc_frame = Frame(50, y - desc_height, width - 100, desc_height, showBoundary=0)
            desc_frame.addFromList([desc_para], pdf)
            y -= desc_height + 30

        pdf.save()
        buffer.seek(0)

        return send_file(
            buffer,
            as_attachment=True,
            download_name=download_filename,
            mimetype='application/pdf'
        )

    events = EventDocumentations.query.all()
    return render_template('download_pdf.html', events=events)


@app.route('/download/<int:event_id>')
def download_single(event_id):
    event = EventDocumentations.query.get_or_404(event_id)

    buffer = io.BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    styles = getSampleStyleSheet()
    justified_style = ParagraphStyle(
        name='Justified',
        parent=styles['Normal'],
        fontName='Helvetica',
        fontSize=12,
        leading=14,
        alignment=TA_JUSTIFY
    )

    # Event page
    draw_page_border(pdf, width, height)
    y = height - 50

    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(50, y, event.title)
    y -= 30

    pdf.setFont("Helvetica", 12)
    pdf.drawString(50, y, f"Date: {event.date}")
    y -= 20
    pdf.drawString(50, y, f"Participants: {event.participants}")
    y -= 20

    if event.image_filename:
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], event.image_filename)
        try:
            img = ImageReader(image_path)
            img_width = width - 100
            img_height = 180
            pdf.drawImage(img, 50, y - img_height, width=img_width, height=img_height, preserveAspectRatio=True, mask='auto')
            y -= img_height + 10
        except Exception:
            pass

    desc_para = Paragraph(event.description.replace('\n', '<br />'), justified_style)
    desc_height = 500
    desc_frame = Frame(50, y - desc_height, width - 100, desc_height, showBoundary=0)
    desc_frame.addFromList([desc_para], pdf)

    pdf.save()
    buffer.seek(0)

    filename = secure_filename(f"{event.title}.pdf")
    if not filename.lower().endswith('.pdf'):
        filename += '.pdf'

    return send_file(
        buffer,
        as_attachment=True,
        download_name=filename,
        mimetype='application/pdf'
    )

if __name__ == '__main__':
    app.run(debug=True)
